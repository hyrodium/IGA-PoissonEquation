module NURBS

using IntervalSets
using Luxor
using ElementaryCalculus
import ParametricDraw.ChangeUnit
import ParametricDraw.B√©zPts
import ParametricDraw.LxrPt

export NURBS1mfd, NURBS2mfd, Bs, BÃás, Bsupp, NURBSmapping, href, pref, NURBSdraw, N, N‚Ä≤, NURBSmÃáapping

mutable struct NURBS1mfd
    p::Int64
    k::Array{Float64,1}
    w::Array{Float64,1}
    a::Array{Float64,2}
    function NURBS1mfd(p,k,w,a)
        if (size(a)‚â†(length(k)-p-1,2))
            error("dim-error")
        elseif (size(w)‚â†(length(k)-p-1,))
            error("dim-error2")
        elseif (!issorted(k))
            error("knots not sorted")
        else
            new(p,k,w,a)
        end
    end
end

mutable struct NURBS2mfd
    p::Array{Int64,1}
    k::Array{Array{Float64,1},1}
    w::Array{Float64,2}
    a::Array{Float64,3}
    function NURBS2mfd(p,k,w,a)
        if (length(p)‚â†2)
            error("p-error")
        elseif (length(k)‚â†2)
            error("k-error")
        elseif ([size(w)...]‚â†(length.(k)-p.-1))
            error("dim-error")
        elseif (size(a)‚â†((length.(k)-p.-1)...,2))
            error("dim-error")
        elseif (!*(issorted.(k)...))
            error("knots not sorted")
        else
            new(p,k,w,a)
        end
    end
end

function Bs(i::Int64,p::Int64,k,t)::Float64
    if(p==0)
        return k[i]‚â§t<k[i+1]||(k[i]‚â†k[i+1]==k[end]==t)
    else
        return (((k[i+p]-k[i]‚â†0) ? Bs(i,p-1,k,t)*(t-k[i])/(k[i+p]-k[i]) : 0)
        +((k[i+p+1]-k[i+1]‚â†0) ? Bs(i+1,p-1,k,t)*(k[i+p+1]-t)/(k[i+p+1]-k[i+1]) : 0))
    end
end

function BÃás(i::Int64,p::Int64,k,t)::Float64
    return p*(((k[i+p]-k[i]‚â†0) ? Bs(i,p-1,k,t)/(k[i+p]-k[i]) : 0)
    -((k[i+p+1]-k[i+1]‚â†0) ? Bs(i+1,p-1,k,t)/(k[i+p+1]-k[i+1]) : 0))
end

function Bsupp(i,p,k)::ClosedInterval
    return k[i]..k[i+p+1]
end

function BsCoef(f,p::Int64,k::Array{T,1}) where T<:Real
    n=length(k)-p-1
    Œ∫=[((n+1-i)*k[i]+i*k[i+p+1])/(n+1) for i ‚àà 1:n]
    [Bs(j,p,k,Œ∫[i]) for i ‚àà 1:n, j ‚àà 1:n]\f.(Œ∫)
end

function NURBSmapping(N1::NURBS1mfd,t)
    p=N1.p
    k=N1.k
    w=N1.w
    a=N1.a
    n=length(k)-p-1
    return sum(Bs(I,p,k,t)*a[I,:]*w[I] for I ‚àà 1:n)/sum(Bs(J,p,k,t)*w[J] for J ‚àà 1:n)
end

function NURBSmapping(N2::NURBS2mfd,u)
    p‚ÇÅ,p‚ÇÇ=p=N2.p
    k‚ÇÅ,k‚ÇÇ=k=N2.k
    w=N2.w
    a=N2.a
    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    return sum(Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*a[I‚ÇÅ,I‚ÇÇ,:]*w[I‚ÇÅ,I‚ÇÇ] for I‚ÇÅ ‚àà 1:n‚ÇÅ, I‚ÇÇ ‚àà 1:n‚ÇÇ)/sum(Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ] for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ)
end

function NURBSdraw(N1::NURBS1mfd;filename="NURBS1mfd.svg",up=5,down=-5,right=5,left=-5,zoom=1,unitlength=(100,"pt"),points=true,partitionnumber=5)
    step, unit=(unitlength[1]*zoom,unitlength[2])
    Drawing(step*(right-left),step*(up-down),filename)

    Luxor.origin(-step*left,step*up)
    setline(zoom)
    background("white")

    p=N1.p
    k=N1.k
    a=N1.a
    n=length(k)-p-1
    ùíë(t)=NURBSmapping(N1,t)


    K=DelDpl(k[1+p:end-p])
    KK=Float64[]
    for i in 1:length(K)-1
        for j in 0:partitionnumber
            push!(KK,((partitionnumber-j)*K[i]+j*K[i+1])/partitionnumber)
        end
    end
    K=DelDpl(KK)
    N=length(K)-1

    sethue("red")
    drawbezierpath(BezierPath([BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(ùíë,K[i],K[i+1]))...) for i ‚àà 1:N]),:stroke)

    if (points)
        sethue("black")
        setline(zoom)
        CtrlPts=[LxrPt(a[i,:],step) for i ‚àà 1:size(a)[1]]
        map(p->circle(p,3*zoom,:fill), CtrlPts)
        poly(CtrlPts[:], :stroke)
    end

    finish()
    ChangeUnit(filename,"pt",unit)
    return nothing
end

function NURBSdraw(N2::NURBS2mfd;filename="NURBS2mfd.svg",up=5,down=-5,right=5,left=-5,zoom=1,mesh=(10,10),partitionnumber=(5,5),unitlength=(100,"pt"),points=true)
    step, unit=(unitlength[1]*zoom,unitlength[2])
    Drawing(step*(right-left),step*(up-down),filename)

    Luxor.origin(-step*left,step*up)
    setline(zoom)
    background("white")

    p‚ÇÅ,p‚ÇÇ=p=N2.p
    k‚ÇÅ,k‚ÇÇ=k=N2.k
    w=N2.w
    a=N2.a
    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    ùíë(u)=NURBSmapping(N2,u)

    K‚ÇÅ=DelDpl(k‚ÇÅ[1+p‚ÇÅ:end-p‚ÇÅ])
    KK=Float64[]
    for i in 1:length(K‚ÇÅ)-1
        for j in 0:partitionnumber[1]
            push!(KK,((partitionnumber[1]-j)*K‚ÇÅ[i]+j*K‚ÇÅ[i+1])/partitionnumber[1])
        end
    end
    K‚ÇÅ=DelDpl(KK)
    K‚ÇÇ=DelDpl(k‚ÇÇ[1+p‚ÇÇ:end-p‚ÇÇ])
    KK=Float64[]
    for i in 1:length(K‚ÇÇ)-1
        for j in 0:partitionnumber[2]
            push!(KK,((partitionnumber[2]-j)*K‚ÇÇ[i]+j*K‚ÇÇ[i+1])/partitionnumber[2])
        end
    end
    K‚ÇÇ=DelDpl(KK)

    K=[K‚ÇÅ,K‚ÇÇ]
    N‚ÇÅ,N‚ÇÇ=length.(K).-1
    m‚ÇÅ,m‚ÇÇ=mesh

    sethue(1,.5,.5)
    drawbezierpath(BezierPath(vcat(
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÅ->ùíë([u‚ÇÅ,K‚ÇÇ[1]]),K‚ÇÅ[i],K‚ÇÅ[i+1]))...) for i ‚àà 1:N‚ÇÅ],
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÇ->ùíë([K‚ÇÅ[end],u‚ÇÇ]),K‚ÇÇ[i],K‚ÇÇ[i+1]))...) for i ‚àà 1:N‚ÇÇ],
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÅ->ùíë([u‚ÇÅ,K‚ÇÇ[end]]),K‚ÇÅ[end-i+1],K‚ÇÅ[end-i]))...) for i ‚àà 1:N‚ÇÅ],
        [BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÇ->ùíë([K‚ÇÅ[1],u‚ÇÇ]),K‚ÇÇ[end-i+1],K‚ÇÇ[end-i]))...) for i ‚àà 1:N‚ÇÇ]
    )),:fill,close=true)

    sethue("red")
    for u‚ÇÅ ‚àà range(K‚ÇÅ[1],stop=K‚ÇÅ[end],length=m‚ÇÅ+1)
        drawbezierpath(BezierPath([BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÇ->ùíë([u‚ÇÅ,u‚ÇÇ]),K‚ÇÇ[i],K‚ÇÇ[i+1]))...) for i ‚àà 1:N‚ÇÇ]),:stroke)
    end
    for u‚ÇÇ ‚àà range(K‚ÇÇ[1],stop=K‚ÇÇ[end],length=m‚ÇÇ+1)
        drawbezierpath(BezierPath([BezierPathSegment(map(p->LxrPt(p,step),B√©zPts(u‚ÇÅ->ùíë([u‚ÇÅ,u‚ÇÇ]),K‚ÇÅ[i],K‚ÇÅ[i+1]))...) for i ‚àà 1:N‚ÇÅ]),:stroke)
    end

    if (points)
        sethue("black")
        setline(zoom)
        CtrlPts=[LxrPt(a[i,j,:],step) for i ‚àà 1:size(a)[1], j ‚àà 1:size(a)[2]]
        map(p->circle(p,3*zoom,:fill), CtrlPts)
        for i ‚àà 1:n‚ÇÅ
            poly(CtrlPts[i,:], :stroke)
        end
        for j ‚àà 1:n‚ÇÇ
            poly(CtrlPts[:,j], :stroke)
        end
    end

    finish()
    ChangeUnit(filename,"pt",unit)
    return nothing
end

function pref(N2::NURBS2mfd,p‚Çä::Array{Int64,1})
    p,k,w,a = N2.p,N2.k,N2.w,N2.a
    p‚ÇÅ,p‚ÇÇ=p
    k‚ÇÅ,k‚ÇÇ=k
    p‚ÇÅ‚Ä≤,p‚ÇÇ‚Ä≤=p‚Ä≤=p+p‚Çä
    k‚Çä=[repeat(DelDpl(k[l]),inner=p‚Çä[l]) for l ‚àà 1:2]
    k‚ÇÅ‚Ä≤,k‚ÇÇ‚Ä≤=k‚Ä≤=[sort(convert(Array{Float64,1},vcat(k[l],k‚Çä[l]))) for l ‚àà 1:2]

    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    n‚ÇÅ‚Ä≤,n‚ÇÇ‚Ä≤=n‚Ä≤=length.(k‚Ä≤)-p‚Ä≤.-1
    A‚ÇÅ=hcat([BsCoef(t->Bs(i,p‚ÇÅ,k‚ÇÅ,t),p‚ÇÅ‚Ä≤,k‚ÇÅ‚Ä≤) for i in 1:n‚ÇÅ]...)
    A‚ÇÇ=hcat([BsCoef(t->Bs(i,p‚ÇÇ,k‚ÇÇ,t),p‚ÇÇ‚Ä≤,k‚ÇÇ‚Ä≤) for i in 1:n‚ÇÇ]...)
    w‚Ä≤=[sum(w[I‚ÇÅ,I‚ÇÇ]*A‚ÇÅ[J‚ÇÅ,I‚ÇÅ]*A‚ÇÇ[J‚ÇÇ,I‚ÇÇ] for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ) for J‚ÇÅ in 1:n‚ÇÅ‚Ä≤, J‚ÇÇ in 1:n‚ÇÇ‚Ä≤]
    a‚Ä≤=[sum(a[I‚ÇÅ,I‚ÇÇ,j]*w[I‚ÇÅ,I‚ÇÇ]*A‚ÇÅ[J‚ÇÅ,I‚ÇÅ]*A‚ÇÇ[J‚ÇÇ,I‚ÇÇ]/w‚Ä≤[J‚ÇÅ,J‚ÇÇ] for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ) for J‚ÇÅ in 1:n‚ÇÅ‚Ä≤, J‚ÇÇ in 1:n‚ÇÇ‚Ä≤, j in 1:2]
    return NURBS2mfd(p‚Ä≤,k‚Ä≤,w‚Ä≤,a‚Ä≤)
end

function href(N2::NURBS2mfd,k‚Çä::Array{Array{Float64,1},1})
    p,k,w,a = N2.p,N2.k,N2.w,N2.a
    p‚ÇÅ,p‚ÇÇ=p
    k‚ÇÅ,k‚ÇÇ=k
    p‚ÇÅ‚Ä≤,p‚ÇÇ‚Ä≤=p‚Ä≤=p
    k‚ÇÅ‚Ä≤,k‚ÇÇ‚Ä≤=k‚Ä≤=[sort(vcat(k[l],k‚Çä[l])) for l ‚àà 1:2]

    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    n‚ÇÅ‚Ä≤,n‚ÇÇ‚Ä≤=n‚Ä≤=length.(k‚Ä≤)-p‚Ä≤.-1
    A‚ÇÅ=hcat([BsCoef(t->Bs(i,p‚ÇÅ,k‚ÇÅ,t),p‚ÇÅ‚Ä≤,k‚ÇÅ‚Ä≤) for i in 1:n‚ÇÅ]...)
    A‚ÇÇ=hcat([BsCoef(t->Bs(i,p‚ÇÇ,k‚ÇÇ,t),p‚ÇÇ‚Ä≤,k‚ÇÇ‚Ä≤) for i in 1:n‚ÇÇ]...)
    w‚Ä≤=[sum(w[I‚ÇÅ,I‚ÇÇ]*A‚ÇÅ[J‚ÇÅ,I‚ÇÅ]*A‚ÇÇ[J‚ÇÇ,I‚ÇÇ] for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ) for J‚ÇÅ in 1:n‚ÇÅ‚Ä≤, J‚ÇÇ in 1:n‚ÇÇ‚Ä≤]
    a‚Ä≤=[sum(a[I‚ÇÅ,I‚ÇÇ,j]*w[I‚ÇÅ,I‚ÇÇ]*A‚ÇÅ[J‚ÇÅ,I‚ÇÅ]*A‚ÇÇ[J‚ÇÇ,I‚ÇÇ]/w‚Ä≤[J‚ÇÅ,J‚ÇÇ] for I‚ÇÅ in 1:n‚ÇÅ, I‚ÇÇ in 1:n‚ÇÇ) for J‚ÇÅ in 1:n‚ÇÅ‚Ä≤, J‚ÇÇ in 1:n‚ÇÇ‚Ä≤, j in 1:2]
    return NURBS2mfd(p‚Ä≤,k‚Ä≤,w‚Ä≤,a‚Ä≤)
end

function N(N2::NURBS2mfd,I‚ÇÅ,I‚ÇÇ,u)
    p‚ÇÅ,p‚ÇÇ=p=N2.p
    k‚ÇÅ,k‚ÇÇ=k=N2.k
    w=N2.w
    n‚ÇÅ,n‚ÇÇ=length.(k)-p.-1
    return Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[I‚ÇÅ,I‚ÇÇ]/sum(Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ] for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ)
end

function N‚Ä≤(N2::NURBS2mfd,I‚ÇÅ,I‚ÇÇ,i,u)
    p‚ÇÅ,p‚ÇÇ=p=N2.p
    k‚ÇÅ,k‚ÇÇ=k=N2.k
    w=N2.w
    n‚ÇÅ,n‚ÇÇ=length.(k)-p.-1
    if(i==1)
        return sum(-Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[I‚ÇÅ,I‚ÇÇ]*BÃás(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ]+BÃás(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[I‚ÇÅ,I‚ÇÇ]*Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ] for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ)/((sum(Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ] for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ))^2)
    else
        return sum(-Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[I‚ÇÅ,I‚ÇÇ]*Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*BÃás(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ]+Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*BÃás(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[I‚ÇÅ,I‚ÇÇ]*Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ] for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ)/((sum(Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ] for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ))^2)
    end
end

function N‚Ä≤(N2::NURBS2mfd,I‚ÇÅ,I‚ÇÇ,u)
    p‚ÇÅ,p‚ÇÇ=p=N2.p
    k‚ÇÅ,k‚ÇÇ=k=N2.k
    w=N2.w
    n‚ÇÅ,n‚ÇÇ=length.(k)-p.-1
    return -w[I‚ÇÅ,I‚ÇÇ]*sum(
        [Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*BÃás(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])-BÃás(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])
         Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*BÃás(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])-Bs(I‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*BÃás(I‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])]*w[J‚ÇÅ,J‚ÇÇ]
        for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ)/sum(Bs(J‚ÇÅ,p‚ÇÅ,k‚ÇÅ,u[1])*Bs(J‚ÇÇ,p‚ÇÇ,k‚ÇÇ,u[2])*w[J‚ÇÅ,J‚ÇÇ] for J‚ÇÅ ‚àà 1:n‚ÇÅ, J‚ÇÇ ‚àà 1:n‚ÇÇ)^2
end

function NURBSmÃáapping(N2::NURBS2mfd,u)
    p‚ÇÅ,p‚ÇÇ=p=N2.p
    k‚ÇÅ,k‚ÇÇ=k=N2.k
    a=N2.a
    n‚ÇÅ,n‚ÇÇ=n=length.(k)-p.-1
    return [sum(N‚Ä≤(N2,I‚ÇÅ,I‚ÇÇ,j,u)*a[I‚ÇÅ,I‚ÇÇ,i] for I‚ÇÅ ‚àà 1:n‚ÇÅ, I‚ÇÇ ‚àà 1:n‚ÇÇ) for i in 1:2, j in 1:2]
end

# function NURBSjacobian(N2::NURBS2mfd,u)
#     det(NURBSmÃáapping(N2,u))
# end

end
